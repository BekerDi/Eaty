package com.example.myeaty

import android.util.Log

object SQLBridge {

    init {
        System.loadLibrary("native-lib")
    }

    // üîß –ù–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    external fun nativeOpenDatabase(path: String): Boolean
    external fun nativeCloseDatabase()
    external fun nativeSaveUserFullData(
        name: String,
        gender: Int,
        age: Int,
        weight: Int,
        height: Int,
        goal: Int,
        activityLevel: Int,
        password: String
    )
    external fun nativeCalculateNutrition(
        userId: Int,
        gender: Int,
        age: Int,
        weight: Int,
        height: Int,
        goal: Int,
        activityLevel: Int
    ): FloatArray

    external fun nativeGetLastUserId(): Int
    external fun nativeLoginUser(name: String, password: String): Int
    external fun nativeGetKBJUForUser(userId: Int): FloatArray
    external fun nativeInitProductDatabase()
    external fun nativeGetAllProducts(): Array<Products>

    external fun nativeGetUserProfile(userId: Int): UserProfile
    external fun nativeUpdateUserProfile(
        userId: Int,
        age: Int,
        weight: Int,
        height: Int,
        goal: Int,
        activityLevel: Int
    )

    // üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã
    private var isDbOpen = false

    fun openDatabaseWithLog(path: String) {
        Log.i("MyEatyDebug", "DB Path: $path")
        openDatabaseOnce(path)
    }

    fun openDatabaseOnce(path: String) {
        if (!isDbOpen) {
            isDbOpen = nativeOpenDatabase(path)
        }
    }

    fun closeDatabase() {
        if (isDbOpen) {
            nativeCloseDatabase()
            isDbOpen = false
        }
    }

    // üîß –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ + –ø–µ—Ä–µ—Å—á—ë—Ç –ö–ë–ñ–£
    fun saveUserAndCalculateKBJU(
        name: String,
        gender: Int,
        age: Int,
        weight: Int,
        height: Int,
        goal: Int,
        activityLevel: Int,
        password: String
    ): FloatArray {
        nativeSaveUserFullData(name, gender, age, weight, height, goal, activityLevel, password)
        val userId = getLastInsertedUserId()
        return nativeCalculateNutrition(userId, gender, age, weight, height, goal, activityLevel)
    }

    private fun getLastInsertedUserId(): Int {
        val userId = nativeGetLastUserId()
        Log.i("MyEatyDebug", "–ü–æ–ª—É—á–µ–Ω ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId")
        return userId
    }

    // üîß –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    fun getAllProducts(): List<Products> {
        return nativeGetAllProducts().toList()
    }

    // üîß –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    fun getUserProfile(userId: Int): UserProfile {
        return nativeGetUserProfile(userId)
    }

    // üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    fun updateUserProfile(
        userId: Int,
        age: Int,
        weight: Int,
        height: Int,
        goal: Int,
        activityLevel: Int
    ) {
        nativeUpdateUserProfile(userId, age, weight, height, goal, activityLevel)
    }

    // üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—á—ë—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å gender)
    fun updateUserProfileAndRecalculate(
        userId: Int,
        gender: Int,
        age: Int,
        weight: Int,
        height: Int,
        goal: Int,
        activityLevel: Int
    ): FloatArray {
        nativeUpdateUserProfile(userId, age, weight, height, goal, activityLevel)
        return nativeCalculateNutrition(userId, gender, age, weight, height, goal, activityLevel)
    }

    // üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—á—ë—Ç (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ gender)
    fun updateUserProfileWithFetchAndRecalculate(
        userId: Int,
        age: Int,
        weight: Int,
        height: Int,
        goal: Int,
        activityLevel: Int
    ): FloatArray {
        val gender = getUserProfile(userId).gender
        return updateUserProfileAndRecalculate(userId, gender, age, weight, height, goal, activityLevel)
    }
}
